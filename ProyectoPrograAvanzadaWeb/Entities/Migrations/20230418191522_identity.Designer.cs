// <auto-generated />
using System;
using Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20230418191522_identity")]
    partial class identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Habitacione", b =>
                {
                    b.Property<int>("HabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HAB_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabId"), 1L, 1);

                    b.Property<bool?>("HabActiva")
                        .HasColumnType("bit")
                        .HasColumnName("HAB_Activa");

                    b.Property<int?>("HabCantBannos")
                        .HasColumnType("int")
                        .HasColumnName("HAB_CantBannos");

                    b.Property<int?>("HabCantCamas")
                        .HasColumnType("int")
                        .HasColumnName("HAB_CantCamas");

                    b.Property<int?>("HabNumPuerta")
                        .HasColumnType("int")
                        .HasColumnName("HAB_NumPuerta");

                    b.Property<double?>("HabPrecioPorNoche")
                        .HasColumnType("float")
                        .HasColumnName("HAB_PrecioPorNoche");

                    b.HasKey("HabId")
                        .HasName("PK__Habitaci__B36CE3BEB9C8C6D3");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("Entities.Entities.Membresia", b =>
                {
                    b.Property<int>("MbrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MBR_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MbrId"), 1L, 1);

                    b.Property<string>("MbrNombre")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("MBR_Nombre");

                    b.HasKey("MbrId")
                        .HasName("PK__Membresi__DF834F513E461D82");

                    b.ToTable("Membresias");
                });

            modelBuilder.Entity("Entities.Entities.Reservacione", b =>
                {
                    b.Property<int>("RsvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RSV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RsvId"), 1L, 1);

                    b.Property<DateTime?>("RsvFechaEntrada")
                        .HasColumnType("datetime")
                        .HasColumnName("RSV_FechaEntrada");

                    b.Property<DateTime?>("RsvFechaSalida")
                        .HasColumnType("datetime")
                        .HasColumnName("RSV_FechaSalida");

                    b.Property<int?>("RsvHabId")
                        .HasColumnType("int")
                        .HasColumnName("RSV_HAB_ID");

                    b.Property<double?>("RsvPrecioFinal")
                        .HasColumnType("float")
                        .HasColumnName("RSV_PrecioFinal");

                    b.Property<int?>("RsvUsrId")
                        .HasColumnType("int")
                        .HasColumnName("RSV_USR_ID");

                    b.HasKey("RsvId")
                        .HasName("PK__Reservac__27B36B70B568C35F");

                    b.HasIndex("RsvHabId");

                    b.HasIndex("RsvUsrId");

                    b.ToTable("Reservaciones");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Property<int>("RolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolId"), 1L, 1);

                    b.Property<string>("RolDescripcion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ROL_Descripcion");

                    b.HasKey("RolId")
                        .HasName("PK__Roles__2A76B76AFDABA5DC");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.Entities.Servicio", b =>
                {
                    b.Property<int>("SvcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SVC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SvcId"), 1L, 1);

                    b.Property<string>("SvcDescripcion")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("SVC_Descripcion");

                    b.Property<double?>("SvcPrecio")
                        .HasColumnType("float")
                        .HasColumnName("SVC_Precio");

                    b.HasKey("SvcId")
                        .HasName("PK__Servicio__B3376A32C0549015");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Entities.Entities.ServiciosReservacione", b =>
                {
                    b.Property<int>("SrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SR_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrId"), 1L, 1);

                    b.Property<int?>("SrRsvId")
                        .HasColumnType("int")
                        .HasColumnName("SR_RSV_ID");

                    b.Property<int?>("SrSvcId")
                        .HasColumnType("int")
                        .HasColumnName("SR_SVC_ID");

                    b.HasKey("SrId")
                        .HasName("PK__Servicio__1D8D1001C0605D07");

                    b.HasIndex("SrRsvId");

                    b.HasIndex("SrSvcId");

                    b.ToTable("Servicios_Reservaciones", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Property<int>("UsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsrId"), 1L, 1);

                    b.Property<string>("UsrApellido")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("USR_Apellido");

                    b.Property<string>("UsrEmail")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("USR_Email");

                    b.Property<int?>("UsrMbrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_MBR_ID");

                    b.Property<string>("UsrNombre")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("USR_Nombre");

                    b.Property<string>("UsrPassword")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("USR_Password");

                    b.Property<int?>("UsrRolId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ROL_ID");

                    b.HasKey("UsrId")
                        .HasName("PK__Usuarios__91DE2276BAD33B54");

                    b.HasIndex("UsrMbrId");

                    b.HasIndex("UsrRolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Entities.Reservacione", b =>
                {
                    b.HasOne("Entities.Entities.Habitacione", "RsvHab")
                        .WithMany("Reservaciones")
                        .HasForeignKey("RsvHabId")
                        .HasConstraintName("FK__Reservaci__RSV_H__32E0915F");

                    b.HasOne("Entities.Entities.Usuario", "RsvUsr")
                        .WithMany("Reservaciones")
                        .HasForeignKey("RsvUsrId")
                        .HasConstraintName("FK__Reservaci__RSV_U__31EC6D26");

                    b.Navigation("RsvHab");

                    b.Navigation("RsvUsr");
                });

            modelBuilder.Entity("Entities.Entities.ServiciosReservacione", b =>
                {
                    b.HasOne("Entities.Entities.Reservacione", "SrRsv")
                        .WithMany("ServiciosReservaciones")
                        .HasForeignKey("SrRsvId")
                        .HasConstraintName("FK__Servicios__SR_RS__33D4B598");

                    b.HasOne("Entities.Entities.Servicio", "SrSvc")
                        .WithMany("ServiciosReservaciones")
                        .HasForeignKey("SrSvcId")
                        .HasConstraintName("FK__Servicios__SR_SV__34C8D9D1");

                    b.Navigation("SrRsv");

                    b.Navigation("SrSvc");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.HasOne("Entities.Entities.Membresia", "UsrMbr")
                        .WithMany("Usuarios")
                        .HasForeignKey("UsrMbrId")
                        .HasConstraintName("FK__Usuarios__USR_MB__30F848ED");

                    b.HasOne("Entities.Entities.Role", "UsrRol")
                        .WithMany("Usuarios")
                        .HasForeignKey("UsrRolId")
                        .HasConstraintName("FK__Usuarios__USR_RO__300424B4");

                    b.Navigation("UsrMbr");

                    b.Navigation("UsrRol");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.Habitacione", b =>
                {
                    b.Navigation("Reservaciones");
                });

            modelBuilder.Entity("Entities.Entities.Membresia", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.Reservacione", b =>
                {
                    b.Navigation("ServiciosReservaciones");
                });

            modelBuilder.Entity("Entities.Entities.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Entities.Entities.Servicio", b =>
                {
                    b.Navigation("ServiciosReservaciones");
                });

            modelBuilder.Entity("Entities.Entities.Usuario", b =>
                {
                    b.Navigation("Reservaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
